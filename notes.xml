<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Earl Potters</title>
<link>https://slyracoon23.github.io/blog/notes.html</link>
<atom:link href="https://slyracoon23.github.io/blog/notes.xml" rel="self" type="application/rss+xml"/>
<description>Personal summaries and insights gathered from reading various research papers and articles.</description>
<generator>quarto-1.7.31</generator>
<lastBuildDate>Tue, 03 Jun 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>NOTES: How to Prepare a Vision Dataset</title>
  <dc:creator>Earl Potters</dc:creator>
  <link>https://slyracoon23.github.io/blog/notes/Dataset Prep/how_to_prepare_a_vision_dataset.html</link>
  <description><![CDATA[ 





<section id="notes" class="level2">

<ul>
<li></li>
</ul>


</section>

 ]]></description>
  <category>Dataset Preparation</category>
  <guid>https://slyracoon23.github.io/blog/notes/Dataset Prep/how_to_prepare_a_vision_dataset.html</guid>
  <pubDate>Tue, 03 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>NOTES: Testing Observable JS</title>
  <dc:creator>Earl Potters</dc:creator>
  <link>https://slyracoon23.github.io/blog/notes/obserable JS/interactive-data-visualization-with-obserable-js.html</link>
  <description><![CDATA[ 





<section id="interactive-data-visualization-with-observable-js" class="level2">
<h2 class="anchored" data-anchor-id="interactive-data-visualization-with-observable-js">Interactive Data Visualization with Observable JS</h2>
<p>Observable JS is a powerful way to create interactive data visualizations within Quarto documents. Let’s explore a simple example that demonstrates reactive data binding and visualization.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" data-startfrom="14" data-source-offset="-28" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 13;"><span id="cb1-14">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-15">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">category</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-16">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">category</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-17">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">category</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-18">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">category</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-19">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">category</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">81</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-20">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">category</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-21">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">category</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"G"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-22">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">category</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>}</span>
<span id="cb1-23">]</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create an input slider</span></span>
<span id="cb1-26">viewof multiplier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(</span>
<span id="cb1-27">  [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb1-28">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data multiplier:"</span>}</span>
<span id="cb1-29">)</span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Apply the multiplier reactively</span></span>
<span id="cb1-32">scaled_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> ({</span>
<span id="cb1-33">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">category</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">category</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-34">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> multiplier</span>
<span id="cb1-35">}))</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a bar chart using Plot</span></span>
<span id="cb1-38">Plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>({</span>
<span id="cb1-39">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marginLeft</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-40">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-41">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marks</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [</span>
<span id="cb1-42">    Plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">barY</span>(scaled_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">fill</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"steelblue"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">tip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span>})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-43">    Plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ruleY</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb1-44">  ]</span>
<span id="cb1-45">})</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-2" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-3" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-1-4" data-nodetype="expression">

</div>
</div>
</div>
</div>
<section id="adding-color-control" class="level3">
<h3 class="anchored" data-anchor-id="adding-color-control">Adding Color Control</h3>
<p>We can enhance our visualization by adding more interactive controls:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" data-startfrom="54" data-source-offset="-17" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 53;"><span id="cb2-54">viewof color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(</span>
<span id="cb2-55">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"steelblue"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-56">  {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"steelblue"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bar color:"</span>}</span>
<span id="cb2-57">)</span>
<span id="cb2-58"></span>
<span id="cb2-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a bar chart with user-selected color</span></span>
<span id="cb2-60">Plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>({</span>
<span id="cb2-61">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marginLeft</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-62">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">label</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-63">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">marks</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> [</span>
<span id="cb2-64">    Plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">barY</span>(scaled_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">fill</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">tip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span>})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb2-65">    Plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ruleY</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-66">  ]</span>
<span id="cb2-67">})</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-1" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<div id="ojs-cell-2-2" data-nodetype="expression">

</div>
</div>
</div>
</div>
</section>
<section id="data-table-view" class="level3">
<h3 class="anchored" data-anchor-id="data-table-view">Data Table View</h3>
<p>Observable JS also makes it easy to display your data in multiple formats:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" data-startfrom="74" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 73;"><span id="cb3-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Display the data in a table</span></span>
<span id="cb3-75">Inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(scaled_data)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-3" data-nodetype="expression">

</div>
</div>
</div>
</section>
<section id="how-reactivity-works" class="level3">
<h3 class="anchored" data-anchor-id="how-reactivity-works">How Reactivity Works</h3>
<p>The power of Observable JS lies in its reactive runtime. When you change the slider value, all calculations that depend on <code>multiplier</code> are automatically recomputed, and any visualizations that depend on those calculations are redrawn.</p>
<p>This reactivity makes it easy to create interactive dashboards without writing complex event handling code.</p>
</section>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>To create more complex visualizations with Observable JS, you can:</p>
<ol type="1">
<li>Use data from external sources with <code>FileAttachment()</code> or fetch APIs</li>
<li>Implement more complex interactions between multiple visualizations</li>
<li>Incorporate advanced D3.js visualizations</li>
<li>Use Observable’s built-in libraries for specialized visualizations</li>
</ol>
<p>Check out the <a href="https://observablehq.com/@observablehq/documentation">Observable documentation</a> for more examples and tutorials.</p>


</section>

 ]]></description>
  <category>JavaScript</category>
  <guid>https://slyracoon23.github.io/blog/notes/obserable JS/interactive-data-visualization-with-obserable-js.html</guid>
  <pubDate>Sat, 03 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>NOTES: What is Prompt Engineering?</title>
  <dc:creator>Earl Potters</dc:creator>
  <link>https://slyracoon23.github.io/blog/notes/Large Language Models/what_is_prompt_engineering.html</link>
  <description><![CDATA[ 





<section id="notes" class="level2">



</section>

 ]]></description>
  <category>Large Language Models</category>
  <guid>https://slyracoon23.github.io/blog/notes/Large Language Models/what_is_prompt_engineering.html</guid>
  <pubDate>Sat, 03 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Extending the Context Window of LLMs</title>
  <dc:creator>Earl Potters</dc:creator>
  <link>https://slyracoon23.github.io/blog/notes/Large Language Models/extending_context.html</link>
  <description><![CDATA[ 





<p>📝 <strong>Article</strong>: <a href="https://kaiokendev.github.io/context">https://kaiokendev.github.io/context</a></p>
<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p><strong>Problem</strong>: it is hard to extend the sequence length of a model.</p>
<ul>
<li><a href="https://arxiv.org/abs/2207.04901">Anil et al.&nbsp;(2022)</a>: the length extrapolation fails in part because of “distracting tokens” in the input during the PARITY task.</li>
<li><a href="https://arxiv.org/abs/2212.10356">Chi et al.&nbsp;(2022)</a>: bias terms in positional encoding (like in ALiBi) replicate the effect of windowed attention by decaying token inter-dependency on long-range receptive fields (the tokens only focus on the tokens closest to them).</li>
<li><a href="https://arxiv.org/abs/2305.04859">Tao et al.&nbsp;(2023)</a> observe that, in long sequences, rear position embeddings are updates much fewer times than front position embeddings. They add random padding to the front patch of the sequence.</li>
<li><a href="https://arxiv.org/abs/2306.00946">Liu et al.&nbsp;(2023)</a>: attention in long sequences starts to drift as we move to later positions and only attends to the most recent tokens.</li>
</ul>
</section>
<section id="silver-linings" class="level2">
<h2 class="anchored" data-anchor-id="silver-linings">Silver Linings</h2>
<p>The attention mechanism seems destabilized in the case of long sequences due to an imbalance of attended tokens (either skewed to the front or the back).</p>
<p>Several solutions have been proposed:</p>
<ul>
<li>Few-shot chain-of-thought reasoning and marker tokens</li>
<li>Length generalization/extrapolation can be learned ability to a certain extent (improves performance but not a silver bullet)</li>
<li>LLaMa 7B has been trained for retrieval over a 32K token window by introducing landmark tokens combined with a windowed-attention (blockwise computation).</li>
</ul>
</section>
<section id="potential-solutions" class="level2">
<h2 class="anchored" data-anchor-id="potential-solutions">Potential Solutions</h2>
<ul>
<li>Change the attention calculation: log(n) scaling (does help), relacing the softmax with ReLU in the attention equation (does not converge), etc.</li>
<li>Random Positional Encoding</li>
<li>Shifted Positional Encodings: shifting the tokens progressively along the desired length during the encoding step (failure).</li>
</ul>
</section>
<section id="final-solution" class="level2">
<h2 class="anchored" data-anchor-id="final-solution">Final Solution</h2>
<p>Transformers do not learn how to gauge position based on the relative distance or the rotational factors, but memorize the tokens and their positional scaling factors.</p>
<ul>
<li>Rotary positional embedding to loop the positions around after crossing the max context length (e.g., 2048): <code>position_ids = position_ids % 2048</code></li>
<li>Block repeated positions: repeating the chosen frequency for a block of positions, so [1, 2, 3, 4, 5, …, L] becomes [1, 1, 1, 1, 2, 2, 2, 2, 3, …, L]. This is achieved by changing the frequency update: <code>t *= 1/4</code>.</li>
</ul>
<p>In other words, several tokens (4 in this example) are assigned to the same position. This (surprising) scheme can quadruple the context length with minimal performance degradation (~2%). More information about it in this paper from Meta: https://arxiv.org/abs/2306.15595</p>


</section>

 ]]></description>
  <category>Large Language Models</category>
  <guid>https://slyracoon23.github.io/blog/notes/Large Language Models/extending_context.html</guid>
  <pubDate>Fri, 07 Jul 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Training Data Influence Analysis and Estimation A Survey</title>
  <dc:creator>Earl Potters</dc:creator>
  <link>https://slyracoon23.github.io/blog/notes/Agents/data_influence.html</link>
  <description><![CDATA[ 





<p>📝 <strong>Paper</strong>: <a href="https://arxiv.org/pdf/2212.04612.pdf">https://arxiv.org/pdf/2212.04612.pdf</a></p>
<p>Survey of methods to calculate the influence of training samples.</p>
<p><img src="https://i.imgur.com/o9mQ4jM.png" class="img-fluid"></p>
<section id="pointwise-training-data-influence" class="level2">
<h2 class="anchored" data-anchor-id="pointwise-training-data-influence">Pointwise Training Data Influence</h2>
<p>Quantifies how a single training instance affects the model’s prediction on a single test instance according to some quality measure (e.g., test loss). <img src="https://latex.codecogs.com/png.latex?%CE%B8%5E%E2%88%97%20:=%20%5Ctext%7Barg%20min%7D%20%5Cfrac%7B1%7D%7B%7CD%7C%7D%20%5Csum_%7B(x_i,%20y_i)%20%5Cin%20D%7D%20(y_i%20%E2%88%92%20%CE%B8%5E%5Ctop%20x_i)%5E2"> Early pointwise influence analysis shows that a single outlier can completely shift the parameters of a least-squares regression. Thus, this model is completely non-robust. Different models have been proposed to increase the breakdown point, including changing the average function with a median function.</p>
<p>Modern methods can be categorized into two classes:</p>
<ul>
<li><strong>Retraining-based methods</strong>: measure the training data’s influence by repeatedly retraining a model <img src="https://latex.codecogs.com/png.latex?f"> using different subsets of training set <img src="https://latex.codecogs.com/png.latex?D">.</li>
<li><strong>Gradient-based influence estimators</strong>: estimate influence via the alignment of training and test instance gradients, either throughout or at the end of training.</li>
</ul>
<section id="alternative-perspectives-on-influence" class="level3">
<h3 class="anchored" data-anchor-id="alternative-perspectives-on-influence">Alternative perspectives on influence</h3>
<p>The concept of influence is not clearly standardized:</p>
<ul>
<li><strong>Group influence</strong>: think batches of training data</li>
<li><strong>Joint influence</strong>: consider multiple test instances collectively</li>
<li><strong>Memorization</strong>: defined as the self-influence <img src="https://latex.codecogs.com/png.latex?I(z_i,%20z_i)"></li>
<li><strong>Cook’s distance</strong>: measures the effect of training instances on the model parameters themselves <img src="https://latex.codecogs.com/png.latex?I_%7BCook%7D(z_i)%20:=%20%5Ctheta%5E%7B(T)%7D%20-%20%5Ctheta%5E%7B(T)%7D_%7BD%5E%7B%5Cbackslash%20i%7D%7D"></li>
<li><strong>Expected influence</strong>: average influence across different instantiations and retrainings of a model class</li>
<li><strong>Influence ranking</strong> orders training instances from most positively influential to most negatively influential</li>
</ul>
</section>
</section>
<section id="retraining-based-influence-analysis" class="level2">
<h2 class="anchored" data-anchor-id="retraining-based-influence-analysis">Retraining-Based Influence Analysis</h2>
<p>Measures influence by training a model with and without some instance. Influence is then defined as the difference in these two models’ behavior.</p>
<section id="leave-on-out-influence" class="level3">
<h3 class="anchored" data-anchor-id="leave-on-out-influence">Leave-On-Out Influence</h3>
<p>Leave-one-out (LOO) is the simplest influence measure described in this work. LOO is also the oldest, dating back to Cook and Weisberg [CW82] who term it case deletion diagnostics. <img src="https://latex.codecogs.com/png.latex?I_%7BLOO%7D(z_i,%20z_%7Bte%7D)%20:=%20L(z_%7Bte%7D;%20%CE%B8%5E%7B(T)%7D_%7BD%5E%7B%5Cbackslash%20i%7D%7D)%20%E2%88%92%20L(z_%7Bte%7D;%20%CE%B8%5E%7B(T)%7D%20),"> Measuring the entire training set’s LOO influence requires training <img src="https://latex.codecogs.com/png.latex?(n%20+%201)"> models.</p>
</section>
<section id="downsampling" class="level3">
<h3 class="anchored" data-anchor-id="downsampling">Downsampling</h3>
<p>Mitigates leave-one-out influence’s two primary weaknesses: (1) computational complexity dependent on <img src="https://latex.codecogs.com/png.latex?n"> and (2) instability due to stochastic training variation.</p>
<p>Relies on an ensemble of <img src="https://latex.codecogs.com/png.latex?K"> submodels, each trained on a subset <img src="https://latex.codecogs.com/png.latex?D%5Ek"> or the full training set <img src="https://latex.codecogs.com/png.latex?D">.</p>
<p><img src="https://i.imgur.com/RWv0ce9.png" class="img-fluid"></p>
<p>Intuitively, it corresponds to <img src="https://latex.codecogs.com/png.latex?z_%7Bte%7D">’s average risk when <img src="https://latex.codecogs.com/png.latex?z_i"> is not used in submodel training.</p>
<p>By holding out multiple instances simultaneously and then averaging, each Downsampling submodel provides insight into the influence of all training instances. This allows Downsampling to require (far) fewer retrainings than LOO.</p>
</section>
<section id="shapley-value" class="level3">
<h3 class="anchored" data-anchor-id="shapley-value">Shapley Value</h3>
<p>Intuitively, SV is the weighted change in <img src="https://latex.codecogs.com/png.latex?z_%7Bte%7D">’s risk when <img src="https://latex.codecogs.com/png.latex?z_i"> is added to a random training subset.</p>
<p>It can be viewed as generalizing the leave-one-out influence, where rather than considering only the full training set <img src="https://latex.codecogs.com/png.latex?D">, Shapley value averages the LOO influence across all possible subsets of <img src="https://latex.codecogs.com/png.latex?D">.</p>
<p>The main problem is that SV is computationally intractable for non-trivial datasets, which led to numerous speed-ups in the literature:</p>
<ul>
<li><strong>Truncated Monte Carlo Shapley (TMC-Shapley)</strong>: relies on randomized subset sampling from training set <img src="https://latex.codecogs.com/png.latex?D">.</li>
<li><strong>Gradient Shapley (G-Shapley)</strong>: even faster SV estimator that assumes models are trained in just one gradient step (at the expense of lower accuracy).</li>
<li><strong><img src="https://latex.codecogs.com/png.latex?k">-NN-SV</strong> and **<img src="https://latex.codecogs.com/png.latex?k">-NN Shapley</li>
</ul>
</section>
</section>
<section id="gradient-based-influence-estimation" class="level2">
<h2 class="anchored" data-anchor-id="gradient-based-influence-estimation">Gradient-Based Influence Estimation</h2>
<p>In models trained using <strong>gradient descent</strong>, the influence of training instances can be assessed through training gradients.</p>
<p>There are two types of gradient-based methods:</p>
<ul>
<li><strong>Static methods</strong> estimate the effect of retraining by examining gradients with respect to final model parameters, but this approach typically requires stronger assumptions due to the limited insight a single set of parameters can provide into the optimization landscape.</li>
<li><strong>Dynamic methods</strong> analyze model parameters throughout training, which while being more computationally demanding, allows for fewer assumptions.</li>
</ul>
<p>However, both share a common limitation: they can potentially overlook highly influential training instances.</p>
<section id="static-estimators" class="level3">
<h3 class="anchored" data-anchor-id="static-estimators">Static Estimators</h3>
<p>There are two main static estimators: <strong>influence functions</strong> (more general) and <strong>representer point</strong> (more scalable).</p>
<section id="influence-functions" class="level4">
<h4 class="anchored" data-anchor-id="influence-functions">Influence Functions</h4>
<p>Analyze how a model changes when the weight of a training instance is <strong>slightly perturbed</strong>: <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(T)%7D_%7B+%20%5Cepsilon_i%7D%20=%20%5Carg%20%5Cmin_%7B%5Ctheta%7D%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bz%20%5Cin%20D%7D%20L(z;%20%5Ctheta)%20+%20%5Cepsilon_i%20L(z_i;%20%5Ctheta)."> Assuming the model and loss function are twice-differentiable and strictly convex, Cook and Weisberg demonstrated that an infinitesimal perturbation’s impact could be calculated using a first-order Taylor expansion: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%5Ctheta%5E%7B(T)%7D_%7B+%5Cepsilon_i%7D%7D%7Bd%5Cepsilon_i%7D%20%5Cbigg%7C_%7B%5Cepsilon_i=0%7D%20=%20-%20(H%5E%7B(T)%7D_%5Ctheta)%5E%7B-1%7D%20%5Cnabla_%5Ctheta%20L(z_i;%20%5Ctheta%5E%7B(T)%7D),"> where the empirical risk Hessian <img src="https://latex.codecogs.com/png.latex?H%5E%7B(T)%7D_%5Ctheta%20:=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bz%20%5Cin%20D%7D%20%5Cnabla%5E2_%5Ctheta%20L(z;%20%5Ctheta%5E%7B(T)%7D)"> is assumed to be positive definite.</p>
<p>Koh and Liang extend this result to consider the effect of this infinitesimal perturbation on <img src="https://latex.codecogs.com/png.latex?z_%7Bte%7D">’s risk, whereby applying the chain rule, we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Cfrac%7BdL(z_%7Bte%7D;%20%5Ctheta%5E%7B(T)%7D)%7D%7Bd%5Cepsilon_i%7D%20%5Cbigg%7C_%7B%5Cepsilon_i=0%7D%0A%0A&amp;=%20%5Cfrac%7BdL(z_%7Bte%7D;%20%5Ctheta%5E%7B(T)%7D)%7D%7Bd%5Ctheta%5E%7B(T)%7D_%7B+%5Cepsilon_i%7D%7D%5E%5Ctop%20%7B%5Cfrac%7Bd%5Ctheta%5E%7B(T)%7D_%7B+%5Cepsilon_i%7D%7D%7Bd%5Cepsilon_i%7D%7D%20%5Cbigg%7C_%7B%5Cepsilon_i=0%7D%20%5C%5C%0A%0A&amp;=%20-%20%5Cnabla_%5Ctheta%20L(z_%7Bte%7D;%20%5Ctheta%5E%7B(T)%7D)%5E%5Ctop%20(H%5E%7B(T)%7D_%5Ctheta)%5E%7B-1%7D%20%5Cnabla_%5Ctheta%20L(z_i;%20%5Ctheta%5E%7B(T)%7D).%0A%5Cend%7Balign*%7D"></p>
<p>Removing training instance <img src="https://latex.codecogs.com/png.latex?z_i"> from <img src="https://latex.codecogs.com/png.latex?D"> is equivalent to <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i%20=%20-%5Cfrac%7B1%7D%7Bn%7D">, resulting in the pointwise influence functions estimator <img src="https://latex.codecogs.com/png.latex?%5Chat%7BI%7D_%7BIF%7D(z_i,%20z_%7Bte%7D)%20:=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Cnabla_%5Ctheta%20L(z_%7Bte%7D;%20%5Ctheta%5E%7B(T)%7D)%5E%5Ctop%20(H%5E%7B(T)%7D_%5Ctheta)%5E%7B-1%7D%20%5Cnabla_%5Ctheta%20L(z_i;%20%5Ctheta%5E%7B(T)%7D)"> Intuitively, it represents the influence functions’ estimate of the leave-one-out influence of <img src="https://latex.codecogs.com/png.latex?z_i"> on <img src="https://latex.codecogs.com/png.latex?z_%7Bte%7D">.</p>
</section>
<section id="representer-point-methods" class="level4">
<h4 class="anchored" data-anchor-id="representer-point-methods">Representer Point Methods</h4>
<p>Representer-based methods rely on kernels, which are functions that measure the similarity between two vectors. They decompose the predictions of specific model classes into the individual contributions (i.e., influence) of each training instance.</p>
</section>
</section>
<section id="dynamic-estimators" class="level3">
<h3 class="anchored" data-anchor-id="dynamic-estimators">Dynamic Estimators</h3>
<section id="tracin-tracing-gradient-descent" class="level4">
<h4 class="anchored" data-anchor-id="tracin-tracing-gradient-descent">TracIn – Tracing Gradient Descent</h4>
</section>
<section id="hydra-hypergradient-data-relevance-analysis" class="level4">
<h4 class="anchored" data-anchor-id="hydra-hypergradient-data-relevance-analysis">HyDRA – Hypergradient Data Relevance Analysis</h4>


</section>
</section>
</section>

 ]]></description>
  <category>Machine Learning</category>
  <guid>https://slyracoon23.github.io/blog/notes/Agents/data_influence.html</guid>
  <pubDate>Sat, 07 Jun 2025 00:11:01 GMT</pubDate>
</item>
</channel>
</rss>
